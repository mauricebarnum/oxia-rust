name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      extra_env:
        description: 'Extra environment variables (e.g., FOO=bar BAZ=qux)'
        required: false
        default: ''

env:
  CARGO_TERM_COLOR: always
  RUSTC_WRAPPER: sccache
  SCCACHE_DIR: ~/.cache/sccache

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: set-extra-env
        if: github.event.inputs.extra_env != ''
        run: |
          echo "Setting extra environment variables: ${{ github.event.inputs.extra_env }}"
          # Export each variable for subsequent steps
          for pair in ${{ github.event.inputs.extra_env }}; do
            echo "Exporting $pair"
            echo "$pair" >> $GITHUB_ENV
          done

      - name: checkout
        uses: actions/checkout@v4

      - name: Restore sccache cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/sccache
          key: sccache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-${{ runner.os }}-

      - name: enable-build-cache
        uses: Swatinem/rust-cache@v2

      - name: check formatting
        run: cargo fmt --check

      - name: detect-vendored-build
        id: vendored
        run: |
          vendored=false
          if [ -f .cargo/config.toml ] && grep -q 'vendored-sources' .cargo/config.toml; then
            vendored=true
          fi
          echo "vendored=${vendored}" >> "$GITHUB_OUTPUT"

      - name: fetch-dependencies
        if: steps.vendored.outputs.vendored == 'false'
        run: |
          cargo update --dry-run # update crate index
          cargo fetch --locked   # fetch dependencies: last network dependency

      - name: install-tools
        run: |
          sudo apt-get install -y protobuf-compiler || {
            sudo apt-get update
            sudo apt-get install -y protobuf-compiler
          }


      - name: install-go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: false

      - name: prepare go cache
        run: |
          cache="$PWD/target/.gocache"
          test -d $cache || mkdir -p $cache
          echo "GOCACHE=$cache" >> $GITHUB_ENV

      - name: build
        run: cargo build --frozen --all-targets

      - name: clippy
        run: cargo clippy --no-deps --all-targets --all-features --frozen

      - name: install cargo nextest
        uses: taiki-e/install-action@nextest

      - name: test
        timeout-minutes: 10
        run: cargo nextest run --frozen --no-fail-fast --verbose
