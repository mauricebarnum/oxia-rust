name: Rust

on:
  push:
    branches: ["main"]
    paths-ignore:
      - "build/Dockerfile"
      - ".github/workflows/docker-image.yml"
  pull_request:
    branches: ["main"]
    paths-ignore:
      - "build/Dockerfile"
      - ".github/workflows/docker-image.yml"
  workflow_dispatch:
    inputs:
      extra_env:
        description: "Extra environment variables (e.g., FOO=bar BAZ=qux)"
        required: false
        default: ""
  workflow_run:
    workflows: ["build-docker-image"]
    types:
      - completed
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always
  # Use sccache with local cache only (no GitHub Actions cache)
  SCCACHE_DIR: "/tmp/sccache"
  RUSTC_WRAPPER: "sccache"
  RUST_BACKTRACE: full
  CARGO_PROFILE_DEV_BUILD_OVERRIDE_DEBUG: true

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/rust-build:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: set-extra-env
        if: github.event.inputs.extra_env != ''
        run: |
          echo "Setting extra environment variables: ${{ github.event.inputs.extra_env }}"
          # Export each variable for subsequent steps
          for pair in ${{ github.event.inputs.extra_env }}; do
            echo "Exporting $pair"
            echo "$pair" >> $GITHUB_ENV
          done

      - name: checkout
        uses: actions/checkout@v4

      - name: cargo-deny
        run: cargo deny check

      - name: set-cargo-release-flag
        run: |
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            echo "RELEASE_FLAG=--release" >> $GITHUB_ENV
          else
            echo "RELEASE_FLAG=" >> $GITHUB_ENV
          fi

      - name: enable-sccache
        uses: actions/cache@v4
        with:
          path: /tmp/sccache
          key: sccache-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            sccache-${{ runner.os }}-

      - name: enable-build-cache
        uses: Swatinem/rust-cache@v2

      - name: detect-vendored-build
        id: vendored
        run: |
          vendored=false
          if [ -f .cargo/config.toml ] && grep -q 'vendored-sources' .cargo/config.toml; then
            vendored=true
          fi
          echo "vendored=${vendored}" >> "$GITHUB_OUTPUT"

      - name: fetch-dependencies
        if: steps.vendored.outputs.vendored == 'false'
        run: |
          cargo update --dry-run --verbose # update crate index
          cargo fetch --locked   # fetch dependencies: last network dependency

      - name: clippy
        run: cargo clippy $RELEASE_FLAG --no-deps --all-targets --all-features --frozen

      - name: build
        run: cargo build $RELEASE_FLAG --frozen --all-targets

      - name: test
        timeout-minutes: 10
        run: cargo nextest run $RELEASE_FLAG --frozen --no-fail-fast --verbose

      - name: miri-common
        run: cargo +nightly miri nextest run --package mauricebarnum-oxia-common --frozen
        env:
          MIRIFLAGS: -Zmiri-strict-provenance -Zmiri-symbolic-alignment-check

      - name: miri-client
        run: cargo +nightly miri nextest run --package mauricebarnum-oxia-client --frozen
        env:
          MIRIFLAGS: -Zmiri-strict-provenance -Zmiri-symbolic-alignment-check -Zmiri-disable-isolation

      - name: show-sccache-stats
        run: sccache --show-stats || true
