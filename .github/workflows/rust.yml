name: Rust

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'build/Dockerfile'
      - '.github/workflows/docker-image.yml'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'build/Dockerfile'
      - '.github/workflows/docker-image.yml'
  workflow_dispatch:
    inputs:
      extra_env:
        description: 'Extra environment variables (e.g., FOO=bar BAZ=qux)'
        required: false
        default: ''
  workflow_run:
    workflows: ['build-docker-image']
    types:
      - completed
    branches: ['main']

env:
  CARGO_TERM_COLOR: always
  SCCACHE_DIR_DISABLED: ${{ github.workspace }}/target/.sccache
  RUSTC_WRAPPER_DISABLED: sccache
  RUST_BACKTRACE: full
  CARGO_PROFILE_DEV_BUILD_OVERRIDE_DEBUG: true

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }}/rust-build:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: set-extra-env
        if: github.event.inputs.extra_env != ''
        run: |
          echo "Setting extra environment variables: ${{ github.event.inputs.extra_env }}"
          # Export each variable for subsequent steps
          for pair in ${{ github.event.inputs.extra_env }}; do
            echo "Exporting $pair"
            echo "$pair" >> $GITHUB_ENV
          done

      - name: checkout
        uses: actions/checkout@v4

      - name: enable-build-cache
        uses: Swatinem/rust-cache@v2

      - name: detect-vendored-build
        id: vendored
        run: |
          vendored=false
          if [ -f .cargo/config.toml ] && grep -q 'vendored-sources' .cargo/config.toml; then
            vendored=true
          fi
          echo "vendored=${vendored}" >> "$GITHUB_OUTPUT"

      - name: fetch-dependencies
        if: steps.vendored.outputs.vendored == 'false'
        run: |
          cargo update --dry-run # update crate index
          cargo fetch --locked   # fetch dependencies: last network dependency

      - name: build
        run: cargo build --frozen --all-targets

      - name: clippy
        run: cargo clippy --no-deps --all-targets --all-features --frozen

      - name: test
        timeout-minutes: 10
        run: cargo nextest run --frozen --no-fail-fast --verbose
